schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type FileUploadBank {
  createdAt: AWSDateTime!
  fileName: String!
  fileType(value: String): String!
  id: ID!
  isDownload: Boolean!
  location: String!
  processedAt: AWSDateTime
  processedBy: String
  type(value: String): String!
  updatedAt: AWSDateTime!
}

type MBBlinkCostByPrice {
  blinkCost: String
  id: ID!
  range: String
}

type MBBlinkCostByPriceConnection {
  items: [MBBlinkCostByPrice]
  nextToken: String
}

type MBBlinkPay {
  blink: MBBlinkUser!
  blinkID: ID!
  createdAt: AWSDateTime!
  id: ID!
  payID: ID!
  payment: MBPay!
  type(value: String): String!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBBlinkSettings {
  blinkCost(value: Float): Float!
  blinksByUser(filter: ModelMBBlinkUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userID: ModelIDKeyConditionInput): ModelMBBlinkUserConnection
  country: MBCountry!
  countryID: ID!
  createdAt: AWSDateTime!
  currency(value: String): String!
  deletedAt: AWSDateTime
  id: ID!
  isoStateCode: String!
  promotionalCount(value: Int): Int!
  settings: AWSJSON!
  type(value: String): String!
  updatedAt: AWSDateTime!
}

type MBBlinkUser {
  blinkAcquired(value: Int): Int!
  blinkAvailable(value: Int): Int!
  blinkPrice: Float!
  blinkSetting: MBBlinkSettings!
  blinkSettingID: ID!
  createdAt: AWSDateTime!
  currency(value: String): String!
  deletedAt: AWSDateTime
  id: ID!
  isPromotional(value: Boolean): Boolean!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBCard {
  cardId: String
  cardNumber: String
  createdAt: AWSDateTime
  currencyCode: String
  description: String
  expirationDate: String
  id: String!
  isActive: Boolean
  isUsedPayment: Boolean
  label: String
  nameCard: String
  payType: String
  paymentMethod: AWSJSON
  paymentMethodCountryID: String
  transactionType: String
  updatedAt: AWSDateTime
  userID: String
}

type MBCardConnection {
  items: [MBCard]
  nextToken: String
}

type MBChargeCountry {
  chargeCode: String!
  country: MBCountry!
  countryID: ID!
  createdAt: AWSDateTime!
  currency(value: String): String!
  deletedAt: AWSDateTime
  id: ID!
  isActive(value: Boolean): Boolean!
  isBlinkPay(value: Boolean): Boolean!
  isReceipt(value: Boolean): Boolean!
  isShipping(value: Boolean): Boolean!
  settings: AWSJSON!
  showOrder(value: String): String!
  total(value: Float): Float!
  translate: AWSJSON!
  updatedAt: AWSDateTime!
}

type MBCheckbookUser {
  checkbookData: AWSJSON!
  createdAt: AWSDateTime!
  deletedAt: AWSDateTime
  id: ID!
  updatedAt: AWSDateTime!
  userID: ID!
}

type MBCode {
  code: String!
  codeType: CodeType!
  createdAt: AWSDateTime!
  deletedAt: AWSDateTime
  id: ID!
  isUsed(value: Boolean): Boolean!
  isUserUsed(value: Boolean): Boolean
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBContact {
  code: String
  codeID: ID
  createdAt: AWSDateTime!
  deletedAt: AWSDateTime
  id: ID!
  invited: MBUser!
  invitedID: ID!
  invitingID: ID!
  isFavorite(value: Boolean): Boolean!
  moneyBlinksCode: MBCode
  myReceipts(value: Int): Int!
  myShipments(value: Int): Int!
  updatedAt: AWSDateTime!
}

type MBCorresponsalChargues {
  blinkCost: String
  id: String
  range: String
}

type MBCorresponsalCharguesConnection {
  items: [MBCorresponsalChargues]
  nextToken: String
}

type MBCorresponsalRequests {
  createdAt: AWSDateTime
  id: String!
  status: String
  updatedAt: AWSDateTime
  userID: String
}

type MBCorresponsalRequestsConnection {
  items: [MBCorresponsalRequests]
  nextToken: String
}

type MBCorresponsalSettings {
  createdAt: AWSTime
  id: String
  updatedAt: AWSTime
  userId: String
  value: String
}

type MBCorresponsalSettingsConnection {
  items: [MBCorresponsalSettings!]!
  nextToken: String
}

type MBCorresponsalTx {
  amount: String
  amountwc: String
  code: String
  commission: String
  corresponsal: MBUser!
  corresponsalID: String
  createdAt: AWSDateTime
  customer: MBUser!
  customerID: String
  id: ID!
  transactionType: String
  updatedAt: AWSDateTime
}

type MBCorresponsalTxConnection {
  items: [MBCorresponsalTx]
  nextToken: String
}

type MBCountry {
  alpha2Code: String!
  alpha3Code: String!
  charges(filter: ModelMBChargeCountryFilterInput, limit: Int, nextToken: String, showOrder: ModelStringKeyConditionInput, sortDirection: ModelSortDirection): ModelMBChargeCountryConnection
  country: MBCountry
  countryStateId: ID
  createdAt: AWSDateTime!
  currency(value: String): String!
  deletedAt: AWSDateTime
  id: ID!
  isActive(value: Boolean): Boolean!
  isDownload(value: Boolean): Boolean!
  name: String!
  settings: AWSJSON!
  showOrder: String!
  taxes(filter: ModelMBTaxCountryFilterInput, limit: Int, nextToken: String, showOrder: ModelStringKeyConditionInput, sortDirection: ModelSortDirection): ModelMBTaxCountryConnection
  translate: AWSJSON!
  type: String!
  updatedAt: AWSDateTime!
}

type MBDeletedUser {
  createdAt: AWSDateTime
  id: ID!
  reason: String
  user: MBUser!
  userID: String
}

type MBDownloadBlink {
  amount: Float!
  batchCatch: AWSDateTime
  createdAt: AWSDateTime!
  currency: String!
  deletedAt: AWSDateTime
  id: ID!
  paymentMethod: String!
  paymentMethodId: String!
  processAt: AWSDateTime
  stateCode: String!
  tx: MBTransaction
  txID: ID!
  type: String!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBFinancialData {
  amount: Float!
  blinks: Int!
  createdAt: AWSDateTime!
  currency: String!
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean!
  type: String!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBFinancialDataConnection {
  items: [MBFinancialData!]!
  nextToken: String
}

type MBMyPaymentMethod {
  accountId: String!
  createdAt: AWSDateTime!
  deletedAt: AWSDateTime
  description: String
  id: ID!
  isActive(value: Boolean): Boolean!
  isUsedPayment(value: Boolean): Boolean!
  label: String!
  payType: String!
  paymentMethodCountry: MBPaymentMethodCountry!
  paymentMethodCountryID: ID!
  settings: AWSJSON!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
  value: String!
}

type MBNotification {
  createdAt: AWSDateTime!
  data: AWSJSON!
  id: ID!
  isRead(value: Boolean): Boolean!
  message: String!
  title: String!
  type(value: String): String!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBPay {
  amount: Float!
  createdAt: AWSDateTime!
  currency: String!
  deletedAt: AWSDateTime
  exchangeAmount: Float
  exchangeCurrency: String
  exchangeRate: Float
  id: ID!
  paymentID: ID
  paymentMethod: MBMyPaymentMethod
  paymentMethodCountry: String!
  type(value: String): String!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBPaymentMethod {
  code: String!
  countries(costCenterIDAvailableFromAt: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyConditionInput, filter: ModelMBPaymentMethodCountryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBPaymentMethodCountryConnection
  createdAt: AWSDateTime!
  deletedAt: AWSDateTime
  id: ID!
  name: String!
  translate: AWSJSON!
  updatedAt: AWSDateTime!
}

type MBPaymentMethodCountry {
  alpha2Code: String!
  alpha3Code: String!
  availableFromAt: AWSDate!
  availableUntilAt: AWSDate
  costCenter: MBCountry!
  costCenterID: ID!
  createdAt: AWSDateTime!
  id: ID!
  isActive(value: Boolean): Boolean!
  isReceipt(value: Boolean): Boolean!
  isShipping(value: Boolean): Boolean!
  paymentMethod: MBPaymentMethod!
  paymentMethodID: ID!
  paymentTypeCode: String!
  settings: AWSJSON!
  updatedAt: AWSDateTime!
  users(filter: ModelMBMyPaymentMethodFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userIDCreatedAt: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyConditionInput): ModelMBMyPaymentMethodConnection
}

type MBSettings {
  alpha2Code: String!
  alpha3Code: String!
  createdAt: AWSDateTime!
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean!
  platform: String!
  settings: AWSJSON!
  updatedAt: AWSDateTime!
}

type MBSettingsCard {
  id: String!
  isActive: Boolean
  isUseToPay: Boolean
  settings: AWSJSON
  type: String
  typeCard: String
}

type MBSettingsCardConnection {
  items: [MBSettingsCard]
  nextToken: String
}

type MBTaxCountry {
  country: MBCountry!
  countryID: ID!
  createdAt: AWSDateTime!
  currency(value: String): String!
  deletedAt: AWSDateTime
  id: ID!
  isActive(value: Boolean): Boolean!
  isBlinkPay(value: Boolean): Boolean!
  isReceipt(value: Boolean): Boolean!
  isShipping(value: Boolean): Boolean!
  settings: AWSJSON!
  showOrder(value: String): String!
  taxCode: String!
  total(value: Float): Float!
  translate: AWSJSON!
  updatedAt: AWSDateTime!
}

type MBTransaction {
  amount(value: Float): Float!
  amountDeposit(value: Float): Float!
  charges(value: Float): Float!
  codeID: ID!
  createdAt: AWSDateTime!
  currency(value: String): String!
  currencyDeposit(value: String): String!
  deletedAt: AWSDateTime
  downloads(createdAt: ModelStringKeyConditionInput, filter: ModelMBDownloadBlinkFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBDownloadBlinkConnection
  id: ID!
  isConfirm: Boolean!
  isReceipt: Boolean
  message: String
  moneyBlinksCode: MBCode!
  receipt: MBUser
  receiptID: ID
  requestMessage: String
  shipping: MBUser!
  shippingID: ID!
  taxes(value: Float): Float!
  txStatus: TxStatus!
  txType: TxType!
  txValues: AWSJSON!
  type(value: String): String!
  updatedAt: AWSDateTime!
}

type MBTransactionPay {
  createdAt: AWSDateTime!
  id: ID!
  payID: ID!
  payment: MBPay!
  tx: MBTransaction!
  txID: ID!
  type(value: String): String!
  updatedAt: AWSDateTime!
  user: MBUser!
  userID: ID!
}

type MBUser {
  acceptedPromotionalInfo: Boolean
  acceptedRequestBlink: Boolean
  address: String
  alpha2Code(value: String): String
  alpha3Code(value: String): String
  avatarUrl: String
  birthDate: AWSDateTime
  checkEmail(value: Boolean): Boolean!
  checkPhone(value: Boolean): Boolean!
  city: String
  cognitoUserId: ID!
  country: String
  createdAt: AWSDateTime!
  currency(value: String): String
  deletedAt: AWSDateTime
  deviceToken: String
  email: AWSEmail!
  fullName: String!
  id: ID!
  idcheckbookID: String
  identificationBackUrl: String
  identificationNumber: String
  identificationType: String
  identificationUrl: String
  isAvailabilityTx(value: Boolean): Boolean!
  isMFA: Boolean
  isTerms(value: Boolean): Boolean!
  isUpdateAccount: Boolean
  isUsedMoneyBlinkAmount(value: Boolean): Boolean
  locale: String!
  myBlinks(blinkSettingID: ModelIDKeyConditionInput, filter: ModelMBBlinkUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBBlinkUserConnection
  myPayments(filter: ModelMBMyPaymentMethodFilterInput, limit: Int, nextToken: String, paymentMethodCountryIDCreatedAt: ModelMBMyPaymentMethodByPaymentUserCompositeKeyConditionInput, sortDirection: ModelSortDirection): ModelMBMyPaymentMethodConnection
  nickname: String!
  oldAvatarUrl: String
  oldIdentificationBackUrl: String
  oldIdentificationUrl: String
  phoneNumber: String!
  role: String
  state: String
  type: String!
  updatedAt: AWSDateTime!
  zipCode: String
}

type MBUserOqkpjuho2ngvbonruy7shv26zuPre {
  createdAt: String
  email: String
  fullName: String
  id: String!
  identificationNumber: String
  nickname: String
  phoneNumber: String
  type: String
}

type MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection {
  items: [MBUserOqkpjuho2ngvbonruy7shv26zuPre]
  nextToken: String
}

type MBUserPartiesAML {
  createdAt: String
  deletedAt: String
  id: String!
  partyID: String
  settings: AWSJSON
  status: String
  updatedAt: String
  userID: String
}

type MBUserPartiesAMLConnection {
  items: [MBUserPartiesAML]
  nextToken: String
}

type ModelFileUploadBankConnection {
  items: [FileUploadBank!]!
  nextToken: String
}

type ModelMBBlinkPayConnection {
  items: [MBBlinkPay!]!
  nextToken: String
}

type ModelMBBlinkSettingsConnection {
  items: [MBBlinkSettings!]!
  nextToken: String
}

type ModelMBBlinkUserConnection {
  items: [MBBlinkUser!]!
  nextToken: String
}

type ModelMBChargeCountryConnection {
  items: [MBChargeCountry!]!
  nextToken: String
}

type ModelMBCheckbookUserConnection {
  items: [MBCheckbookUser]
  nextToken: String
}

type ModelMBCodeConnection {
  items: [MBCode!]!
  nextToken: String
}

type ModelMBContactConnection {
  items: [MBContact!]!
  nextToken: String
}

type ModelMBCountryConnection {
  items: [MBCountry!]!
  nextToken: String
}

type ModelMBDownloadBlinkConnection {
  items: [MBDownloadBlink!]!
  nextToken: String
}

type ModelMBFinancialDataConnection {
  items: [MBFinancialData!]!
  nextToken: String
}

type ModelMBMyPaymentMethodConnection {
  items: [MBMyPaymentMethod!]!
  nextToken: String
}

type ModelMBNotificationConnection {
  items: [MBNotification!]!
  nextToken: String
}

type ModelMBPayConnection {
  items: [MBPay!]!
  nextToken: String
}

type ModelMBPaymentMethodConnection {
  items: [MBPaymentMethod!]!
  nextToken: String
}

type ModelMBPaymentMethodCountryConnection {
  items: [MBPaymentMethodCountry!]!
  nextToken: String
}

type ModelMBSettingsConnection {
  items: [MBSettings!]!
  nextToken: String
}

type ModelMBTaxCountryConnection {
  items: [MBTaxCountry!]!
  nextToken: String
}

type ModelMBTransactionConnection {
  items: [MBTransaction!]!
  nextToken: String
}

type ModelMBTransactionPayConnection {
  items: [MBTransactionPay!]!
  nextToken: String
}

type ModelMBUserConnection {
  items: [MBUser!]!
  nextToken: String
}

type ModelMBUserVerified {
  apiResultCode: String
  apiResultMessage: String
  counterRequested: String
  createdAt: String
  deletedAt: AWSDate
  emailSent: Boolean
  errorCode: String
  id: ID!
  status: String
  transactionID: String
  typeVerification: String
  updatedAt: AWSDate
  userID: String
  verified: String
  verifiedBy: String
  workflowID: String
}

type ModelMBUserVerifiedConnection {
  items: [ModelMBUserVerified]
  nextToken: String
}

type Mutation {
  bankEc: AWSJSON
  callCorresponsal(values: AWSJSON): AWSJSON
  completeCorresponsalReset(values: AWSJSON): AWSJSON
  completeTx(values: AWSJSON): AWSJSON
  createFileUploadBank(condition: ModelFileUploadBankConditionInput, input: CreateFileUploadBankInput!): FileUploadBank
  createMBBlinkCostByPrice(input: CreateMBBlinkCostByPriceInput!): MBBlinkCostByPrice
  createMBBlinkPay(condition: ModelMBBlinkPayConditionInput, input: CreateMBBlinkPayInput!): MBBlinkPay
  createMBBlinkSettings(condition: ModelMBBlinkSettingsConditionInput, input: CreateMBBlinkSettingsInput!): MBBlinkSettings
  createMBBlinkUser(condition: ModelMBBlinkUserConditionInput, input: CreateMBBlinkUserInput!): MBBlinkUser
  createMBCard(input: CreateMBCardInput!): MBCard
  createMBChargeCountry(condition: ModelMBChargeCountryConditionInput, input: CreateMBChargeCountryInput!): MBChargeCountry
  createMBCheckbookUser(condition: MBCheckbookUserConditionInput, input: CreateMBCheckbookUserInput!): MBCheckbookUser
  createMBCode(condition: ModelMBCodeConditionInput, input: CreateMBCodeInput!): MBCode
  createMBContact(condition: ModelMBContactConditionInput, input: CreateMBContactInput!): MBContact
  createMBCorresponsalChargues(input: CreateMBCorresponsalCharguesInput!): MBCorresponsalChargues
  createMBCorresponsalRequests(input: CreateMBCorresponsalRequestsInput!): MBCorresponsalRequests
  createMBCorresponsalSettings(condition: ModelMBCorresponsalSettingsConditionInput, input: CreateMBCorresponsalSettingsInput!): MBCorresponsalSettings
  createMBCorresponsalTx(condition: MBCorresponsalTxConditionInput, input: CreateMBCorresponsalTxInput!): MBCorresponsalTx
  createMBCountry(condition: ModelMBCountryConditionInput, input: CreateMBCountryInput!): MBCountry
  createMBDeletedUser(condition: MBDeletedUserConditionInput, input: CreateMBDeletedUserInput!): MBDeletedUser
  createMBDownloadBlink(condition: ModelMBDownloadBlinkConditionInput, input: CreateMBDownloadBlinkInput!): MBDownloadBlink
  createMBFinancialData(condition: ModelMBFinancialDataConditionInput, input: CreateMBFinancialDataInput!): MBFinancialData
  createMBMyPaymentMethod(condition: ModelMBMyPaymentMethodConditionInput, input: CreateMBMyPaymentMethodInput!): MBMyPaymentMethod
  createMBNotification(condition: ModelMBNotificationConditionInput, input: CreateMBNotificationInput!): MBNotification
  createMBPay(condition: ModelMBPayConditionInput, input: CreateMBPayInput!): MBPay
  createMBPaymentMethod(condition: ModelMBPaymentMethodConditionInput, input: CreateMBPaymentMethodInput!): MBPaymentMethod
  createMBPaymentMethodCountry(condition: ModelMBPaymentMethodCountryConditionInput, input: CreateMBPaymentMethodCountryInput!): MBPaymentMethodCountry
  createMBSettings(condition: ModelMBSettingsConditionInput, input: CreateMBSettingsInput!): MBSettings
  createMBSettingsCard(input: CreateMBSettingsCardInput!): MBSettingsCard
  createMBTaxCountry(condition: ModelMBTaxCountryConditionInput, input: CreateMBTaxCountryInput!): MBTaxCountry
  createMBTransaction(condition: ModelMBTransactionConditionInput, input: CreateMBTransactionInput!): MBTransaction
  createMBTransactionPay(condition: ModelMBTransactionPayConditionInput, input: CreateMBTransactionPayInput!): MBTransactionPay
  createMBUser(condition: ModelMBUserConditionInput, input: CreateMBUserInput!): MBUser
  createMBUserOqkpjuho2ngvbonruy7shv26zuPre(input: CreateMBUserOqkpjuho2ngvbonruy7shv26zuPreInput!): MBUserOqkpjuho2ngvbonruy7shv26zuPre
  createMBUserPartiesAML(input: CreateMBUserPartiesAMLInput!): MBUserPartiesAML
  createModelMBUserVerified(input: CreateModelMBUserVerifiedInput!): ModelMBUserVerified
  createOrValidateCode(values: AWSJSON): AWSJSON
  createPay(payInput: AWSJSON): AWSJSON
  createTx(values: AWSJSON): AWSJSON
  createUserCheckbook(values: AWSJSON): AWSJSON
  deleteFileUploadBank(condition: ModelFileUploadBankConditionInput, input: DeleteFileUploadBankInput!): FileUploadBank
  deleteMBBlinkCostByPrice(input: DeleteMBBlinkCostByPriceInput!): MBBlinkCostByPrice
  deleteMBBlinkPay(condition: ModelMBBlinkPayConditionInput, input: DeleteMBBlinkPayInput!): MBBlinkPay
  deleteMBBlinkSettings(condition: ModelMBBlinkSettingsConditionInput, input: DeleteMBBlinkSettingsInput!): MBBlinkSettings
  deleteMBBlinkUser(condition: ModelMBBlinkUserConditionInput, input: DeleteMBBlinkUserInput!): MBBlinkUser
  deleteMBCard(input: DeleteMBCardInput!): MBCard
  deleteMBChargeCountry(condition: ModelMBChargeCountryConditionInput, input: DeleteMBChargeCountryInput!): MBChargeCountry
  deleteMBCheckbookUser(condition: MBCheckbookUserConditionInput, input: DeleteMBCheckbookUserInput!): MBCheckbookUser
  deleteMBCode(condition: ModelMBCodeConditionInput, input: DeleteMBCodeInput!): MBCode
  deleteMBContact(condition: ModelMBContactConditionInput, input: DeleteMBContactInput!): MBContact
  deleteMBCorresponsalChargues(input: DeleteMBCorresponsalCharguesInput!): MBCorresponsalChargues
  deleteMBCorresponsalRequests(input: DeleteMBCorresponsalRequestsInput!): MBCorresponsalRequests
  deleteMBCorresponsalTx(condition: MBCorresponsalTxConditionInput, input: DeleteMBCorresponsalTxInput!): MBCorresponsalTx
  deleteMBCountry(condition: ModelMBCountryConditionInput, input: DeleteMBCountryInput!): MBCountry
  deleteMBDownloadBlink(condition: ModelMBDownloadBlinkConditionInput, input: DeleteMBDownloadBlinkInput!): MBDownloadBlink
  deleteMBFinancialData(condition: ModelMBFinancialDataConditionInput, input: DeleteMBFinancialDataInput!): MBFinancialData
  deleteMBMyPaymentMethod(condition: ModelMBMyPaymentMethodConditionInput, input: DeleteMBMyPaymentMethodInput!): MBMyPaymentMethod
  deleteMBNotification(condition: ModelMBNotificationConditionInput, input: DeleteMBNotificationInput!): MBNotification
  deleteMBPay(condition: ModelMBPayConditionInput, input: DeleteMBPayInput!): MBPay
  deleteMBPaymentMethod(condition: ModelMBPaymentMethodConditionInput, input: DeleteMBPaymentMethodInput!): MBPaymentMethod
  deleteMBPaymentMethodCountry(condition: ModelMBPaymentMethodCountryConditionInput, input: DeleteMBPaymentMethodCountryInput!): MBPaymentMethodCountry
  deleteMBSettings(condition: ModelMBSettingsConditionInput, input: DeleteMBSettingsInput!): MBSettings
  deleteMBSettingsCard(input: DeleteMBSettingsCardInput!): MBSettingsCard
  deleteMBTaxCountry(condition: ModelMBTaxCountryConditionInput, input: DeleteMBTaxCountryInput!): MBTaxCountry
  deleteMBTransaction(condition: ModelMBTransactionConditionInput, input: DeleteMBTransactionInput!): MBTransaction
  deleteMBTransactionPay(condition: ModelMBTransactionPayConditionInput, input: DeleteMBTransactionPayInput!): MBTransactionPay
  deleteMBUser(condition: ModelMBUserConditionInput, input: DeleteMBUserInput!): MBUser
  deleteMBUserOqkpjuho2ngvbonruy7shv26zuPre(input: DeleteMBUserOqkpjuho2ngvbonruy7shv26zuPreInput!): MBUserOqkpjuho2ngvbonruy7shv26zuPre
  deleteMBUserPartiesAML(input: DeleteMBUserPartiesAMLInput!): MBUserPartiesAML
  deleteModelMBUserVerified(input: DeleteModelMBUserVerifiedInput!): ModelMBUserVerified
  performCorresponsalAccount(values: AWSJSON): AWSJSON
  performUserCoderegistration(values: AWSJSON): AWSJSON
  purchasePack(values: AWSJSON): AWSJSON
  rewardsPlans(values: AWSJSON): AWSJSON
  sendEmails(values: AWSJSON): AWSJSON
  upDownCash(values: AWSJSON): AWSJSON
  updateFileUploadBank(condition: ModelFileUploadBankConditionInput, input: UpdateFileUploadBankInput!): FileUploadBank
  updateMBBlinkCostByPrice(input: UpdateMBBlinkCostByPriceInput!): MBBlinkCostByPrice
  updateMBBlinkPay(condition: ModelMBBlinkPayConditionInput, input: UpdateMBBlinkPayInput!): MBBlinkPay
  updateMBBlinkSettings(condition: ModelMBBlinkSettingsConditionInput, input: UpdateMBBlinkSettingsInput!): MBBlinkSettings
  updateMBBlinkUser(condition: ModelMBBlinkUserConditionInput, input: UpdateMBBlinkUserInput!): MBBlinkUser
  updateMBCard(input: UpdateMBCardInput!): MBCard
  updateMBChargeCountry(condition: ModelMBChargeCountryConditionInput, input: UpdateMBChargeCountryInput!): MBChargeCountry
  updateMBCheckbookUser(condition: MBCheckbookUserConditionInput, input: UpdateMBCheckbookUserInput!): MBCheckbookUser
  updateMBCode(condition: ModelMBCodeConditionInput, input: UpdateMBCodeInput!): MBCode
  updateMBContact(condition: ModelMBContactConditionInput, input: UpdateMBContactInput!): MBContact
  updateMBCorresponsalChargues(input: UpdateMBCorresponsalCharguesInput!): MBCorresponsalChargues
  updateMBCorresponsalRequests(input: UpdateMBCorresponsalRequestsInput!): MBCorresponsalRequests
  updateMBCorresponsalTx(condition: MBCorresponsalTxConditionInput, input: UpdateMBCorresponsalTxInput!): MBCorresponsalTx
  updateMBCountry(condition: ModelMBCountryConditionInput, input: UpdateMBCountryInput!): MBCountry
  updateMBDownloadBlink(condition: ModelMBDownloadBlinkConditionInput, input: UpdateMBDownloadBlinkInput!): MBDownloadBlink
  updateMBFinancialData(condition: ModelMBFinancialDataConditionInput, input: UpdateMBFinancialDataInput!): MBFinancialData
  updateMBMyPaymentMethod(condition: ModelMBMyPaymentMethodConditionInput, input: UpdateMBMyPaymentMethodInput!): MBMyPaymentMethod
  updateMBNotification(condition: ModelMBNotificationConditionInput, input: UpdateMBNotificationInput!): MBNotification
  updateMBPay(condition: ModelMBPayConditionInput, input: UpdateMBPayInput!): MBPay
  updateMBPaymentMethod(condition: ModelMBPaymentMethodConditionInput, input: UpdateMBPaymentMethodInput!): MBPaymentMethod
  updateMBPaymentMethodCountry(condition: ModelMBPaymentMethodCountryConditionInput, input: UpdateMBPaymentMethodCountryInput!): MBPaymentMethodCountry
  updateMBSettings(condition: ModelMBSettingsConditionInput, input: UpdateMBSettingsInput!): MBSettings
  updateMBSettingsCard(input: UpdateMBSettingsCardInput!): MBSettingsCard
  updateMBTaxCountry(condition: ModelMBTaxCountryConditionInput, input: UpdateMBTaxCountryInput!): MBTaxCountry
  updateMBTransaction(condition: ModelMBTransactionConditionInput, input: UpdateMBTransactionInput!): MBTransaction
  updateMBTransactionPay(condition: ModelMBTransactionPayConditionInput, input: UpdateMBTransactionPayInput!): MBTransactionPay
  updateMBUser(condition: ModelMBUserConditionInput, input: UpdateMBUserInput!): MBUser
  updateMBUserOqkpjuho2ngvbonruy7shv26zuPre(input: UpdateMBUserOqkpjuho2ngvbonruy7shv26zuPreInput!): MBUserOqkpjuho2ngvbonruy7shv26zuPre
  updateMBUserPartiesAML(input: UpdateMBUserPartiesAMLInput!): MBUserPartiesAML
  updateModelMBUserVerified(input: UpdateModelMBUserVerifiedInput!): ModelMBUserVerified
  validateCode(values: AWSJSON): AWSJSON
  verifyMbUser(values: AWSJSON): AWSJSON
  verifyTransactions(values: AWSJSON): AWSJSON
}

type Query {
  GetCheckbookDataByUserID(after: String, first: Int, userID: ID!): ModelMBCheckbookUserConnection
  byBlinkCountryId(countryID: ID, filter: ModelMBBlinkSettingsFilterInput, isoStateCode: ModelStringKeyConditionInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBBlinkSettingsConnection
  byBlinksGetUser(blinkSettingID: ID, filter: ModelMBBlinkUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userID: ModelIDKeyConditionInput): ModelMBBlinkUserConnection
  byCode(code: String, createdAt: ModelStringKeyConditionInput, filter: ModelMBCodeFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBCodeConnection
  byCodeData1(createdAt: ModelStringKeyConditionInput, filter: ModelMBUserFilterInput, limit: Int, nextToken: String, nickname: String, sortDirection: ModelSortDirection): ModelMBUserConnection
  byCostCenter(costCenterID: ID, filter: ModelMBPaymentMethodCountryFilterInput, limit: Int, nextToken: String, paymentMethodIDAvailableFromAt: ModelMBPaymentMethodCountryByCostCenterCompositeKeyConditionInput, sortDirection: ModelSortDirection): ModelMBPaymentMethodCountryConnection
  byEmail(createdAt: ModelStringKeyConditionInput, email: AWSEmail, filter: ModelMBUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBUserConnection
  byIdentification(createdAt: ModelStringKeyConditionInput, filter: ModelMBUserFilterInput, identificationNumber: String, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBUserConnection
  byNickname(createdAt: ModelStringKeyConditionInput, filter: ModelMBUserFilterInput, limit: Int, nextToken: String, nickname: String, sortDirection: ModelSortDirection): ModelMBUserConnection
  byPaymentMethod(costCenterIDAvailableFromAt: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyConditionInput, filter: ModelMBPaymentMethodCountryFilterInput, limit: Int, nextToken: String, paymentMethodID: ID, sortDirection: ModelSortDirection): ModelMBPaymentMethodCountryConnection
  byPaymentUser(filter: ModelMBMyPaymentMethodFilterInput, limit: Int, nextToken: String, paymentMethodCountryIDCreatedAt: ModelMBMyPaymentMethodByPaymentUserCompositeKeyConditionInput, sortDirection: ModelSortDirection, userID: ID): ModelMBMyPaymentMethodConnection
  byPhoneNumber(createdAt: ModelStringKeyConditionInput, filter: ModelMBUserFilterInput, limit: Int, nextToken: String, phoneNumber: String, sortDirection: ModelSortDirection): ModelMBUserConnection
  byUserIdBlinks(blinkSettingID: ModelIDKeyConditionInput, filter: ModelMBBlinkUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userID: ID): ModelMBBlinkUserConnection
  costCenterAlpha2Code(alpha2Code: String, filter: ModelMBCountryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBCountryConnection
  costCenterAlpha3Code(alpha3Code: String, filter: ModelMBCountryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBCountryConnection
  downloadByTx(createdAt: ModelStringKeyConditionInput, filter: ModelMBDownloadBlinkFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, txID: ID): ModelMBDownloadBlinkConnection
  getCheckbookDataByUserID(createdAt: ModelStringKeyConditionInput, filter: TableMBCheckbookUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userID: ID): ModelMBCheckbookUserConnection
  getCorresponsalTxByCode(code: String!, createdAt: ModelStringKeyConditionInput, filter: TableMBCorresponsalTxFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): MBCorresponsalTxConnection
  getCorresponsalTxByCorresponsalID(corresponsalID: String!, createdAt: ModelStringKeyConditionInput, filter: TableMBCorresponsalTxFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): MBCorresponsalTxConnection
  getCorresponsalTxByCustomerID(createdAt: ModelStringKeyConditionInput, customerID: String!, filter: TableMBCorresponsalTxFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): MBCorresponsalTxConnection
  getFileUploadBank(id: ID!): FileUploadBank
  getMBBlinkCostByPrice(id: ID!): MBBlinkCostByPrice
  getMBBlinkPay(id: ID!): MBBlinkPay
  getMBBlinkSettings(id: ID!): MBBlinkSettings
  getMBBlinkUser(id: ID!): MBBlinkUser
  getMBCard(id: String!): MBCard
  getMBChargeCountry(id: ID!): MBChargeCountry
  getMBCheckbookUser(id: String!): MBCheckbookUser
  getMBCode(id: ID!): MBCode
  getMBContact(id: ID!): MBContact
  getMBCorresponsalChargues(id: String!): MBCorresponsalChargues
  getMBCorresponsalRequests(id: String!): MBCorresponsalRequests
  getMBCorresponsalSettings(id: String!): MBCorresponsalSettings
  getMBCorresponsalSettingsByUserId(createdAt: ModelStringKeyConditionInput, filter: TableMBCorresponsalSettingsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userId: String!): MBCorresponsalSettingsConnection
  getMBCorresponsalTx(id: ID!): MBCorresponsalTx
  getMBCountry(id: ID!): MBCountry
  getMBDownloadBlink(id: ID!): MBDownloadBlink
  getMBFinancialData(id: ID!): MBFinancialData
  getMBFinancialDataByBlinks(blinks: Int!): MBFinancialDataConnection
  getMBFinancialDataByUserID(createdAt: ModelStringKeyConditionInput, filter: ModelMBTransactionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userID: String): ModelMBFinancialDataConnection
  getMBMyPaymentMethod(id: ID!): MBMyPaymentMethod
  getMBNotification(id: ID!): MBNotification
  getMBPay(id: ID!): MBPay
  getMBPaymentMethod(id: ID!): MBPaymentMethod
  getMBPaymentMethodCountry(id: ID!): MBPaymentMethodCountry
  getMBSettings(id: ID!): MBSettings
  getMBSettingsCard(id: String!): MBSettingsCard
  getMBTaxCountry(id: ID!): MBTaxCountry
  getMBTransaction(id: ID!): MBTransaction
  getMBTransactionByCodeID(codeID: String, createdAt: ModelStringKeyConditionInput, filter: ModelMBTransactionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMBTransactionConnection
  getMBTransactionPay(id: ID!): MBTransactionPay
  getMBUser(id: ID!): MBUser
  getMBUserOqkpjuho2ngvbonruy7shv26zuPre(id: String!): MBUserOqkpjuho2ngvbonruy7shv26zuPre
  getMBUserPartiesAML(id: String!): MBUserPartiesAML
  getModelMBUserVerified(id: ID!): ModelMBUserVerified
  getUserVerifiedByUserID(createdAt: ModelStringKeyConditionInput, filter: TableModelMBUserVerifiedFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userID: ID): ModelMBUserVerifiedConnection
  lastBlinkSettings(createdAt: ModelStringKeyConditionInput, filter: ModelMBBlinkSettingsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String): ModelMBBlinkSettingsConnection
  listAll(createdAt: ModelStringKeyConditionInput, filter: ModelMBTransactionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String): ModelMBTransactionConnection
  listAllBlinkPays(createdAt: ModelStringKeyConditionInput, filter: ModelMBBlinkPayFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String): ModelMBBlinkPayConnection
  listAllTxPays(createdAt: ModelStringKeyConditionInput, filter: ModelMBTransactionPayFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String): ModelMBTransactionPayConnection
  listAllUsers(filter: ModelMBUserFilterInput, fullName: ModelStringKeyConditionInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String): ModelMBUserConnection
  listByNameOrOrder(filter: ModelMBCountryFilterInput, limit: Int, nextToken: String, showOrder: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, type: String): ModelMBCountryConnection
  listChargesByCountryId(countryID: ID, filter: ModelMBChargeCountryFilterInput, limit: Int, nextToken: String, showOrder: ModelStringKeyConditionInput, sortDirection: ModelSortDirection): ModelMBChargeCountryConnection
  listFileUploadBanks(filter: ModelFileUploadBankFilterInput, limit: Int, nextToken: String): ModelFileUploadBankConnection
  listFilesEC(createdAt: ModelStringKeyConditionInput, fileType: String, filter: ModelFileUploadBankFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelFileUploadBankConnection
  listMBBlinkCostByPrices(filter: TableMBBlinkCostByPriceFilterInput, limit: Int, nextToken: String): MBBlinkCostByPriceConnection
  listMBBlinkPays(filter: ModelMBBlinkPayFilterInput, limit: Int, nextToken: String): ModelMBBlinkPayConnection
  listMBBlinkSettingss(filter: ModelMBBlinkSettingsFilterInput, limit: Int, nextToken: String): ModelMBBlinkSettingsConnection
  listMBBlinkUsers(filter: ModelMBBlinkUserFilterInput, limit: Int, nextToken: String): ModelMBBlinkUserConnection
  listMBCards(filter: TableMBCardFilterInput, limit: Int, nextToken: String): MBCardConnection
  listMBChargeCountrys(filter: ModelMBChargeCountryFilterInput, limit: Int, nextToken: String): ModelMBChargeCountryConnection
  listMBCheckbookUsers(filter: TableMBCheckbookUserFilterInput, limit: Int, nextToken: String): ModelMBCheckbookUserConnection
  listMBCodes(filter: ModelMBCodeFilterInput, limit: Int, nextToken: String): ModelMBCodeConnection
  listMBContacts(filter: ModelMBContactFilterInput, limit: Int, nextToken: String): ModelMBContactConnection
  listMBCorresponsalChargues(filter: TableMBCorresponsalCharguesFilterInput, limit: Int, nextToken: String): MBCorresponsalCharguesConnection
  listMBCorresponsalRequests(filter: TableMBCorresponsalRequestsFilterInput, limit: Int, nextToken: String): MBCorresponsalRequestsConnection
  listMBCorresponsalTxes(filter: TableMBCorresponsalTxFilterInput, limit: Int, nextToken: String): MBCorresponsalTxConnection
  listMBCountrys(filter: ModelMBCountryFilterInput, limit: Int, nextToken: String): ModelMBCountryConnection
  listMBDownloadBlinks(filter: ModelMBDownloadBlinkFilterInput, limit: Int, nextToken: String): ModelMBDownloadBlinkConnection
  listMBFinancialDatas(filter: ModelMBFinancialDataFilterInput, limit: Int, nextToken: String): ModelMBFinancialDataConnection
  listMBMyPaymentMethods(filter: ModelMBMyPaymentMethodFilterInput, limit: Int, nextToken: String): ModelMBMyPaymentMethodConnection
  listMBNotifications(filter: ModelMBNotificationFilterInput, limit: Int, nextToken: String): ModelMBNotificationConnection
  listMBPaymentMethodCountrys(filter: ModelMBPaymentMethodCountryFilterInput, limit: Int, nextToken: String): ModelMBPaymentMethodCountryConnection
  listMBPaymentMethods(filter: ModelMBPaymentMethodFilterInput, limit: Int, nextToken: String): ModelMBPaymentMethodConnection
  listMBPays(filter: ModelMBPayFilterInput, limit: Int, nextToken: String): ModelMBPayConnection
  listMBSettingsCards(filter: TableMBSettingsCardFilterInput, limit: Int, nextToken: String): MBSettingsCardConnection
  listMBSettingss(filter: ModelMBSettingsFilterInput, limit: Int, nextToken: String): ModelMBSettingsConnection
  listMBTaxCountrys(filter: ModelMBTaxCountryFilterInput, limit: Int, nextToken: String): ModelMBTaxCountryConnection
  listMBTransactionPays(filter: ModelMBTransactionPayFilterInput, limit: Int, nextToken: String): ModelMBTransactionPayConnection
  listMBTransactions(filter: ModelMBTransactionFilterInput, limit: Int, nextToken: String): ModelMBTransactionConnection
  listMBUserOqkpjuho2ngvbonruy7shv26zuPres(filter: TableMBUserOqkpjuho2ngvbonruy7shv26zuPreFilterInput, limit: Int, nextToken: String): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
  listMBUserPartiesAMLS(filter: TableMBUserPartiesAMLFilterInput, limit: Int, nextToken: String): MBUserPartiesAMLConnection
  listMBUsers(filter: ModelMBUserFilterInput, limit: Int, nextToken: String): ModelMBUserConnection
  listModelMBUserVerifieds(filter: TableModelMBUserVerifiedFilterInput, limit: Int, nextToken: String): ModelMBUserVerifiedConnection
  listMyNotifications(createdAt: ModelStringKeyConditionInput, filter: ModelMBNotificationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, type: String): ModelMBNotificationConnection
  listTaxesByCountryId(countryID: ID, filter: ModelMBTaxCountryFilterInput, limit: Int, nextToken: String, showOrder: ModelStringKeyConditionInput, sortDirection: ModelSortDirection): ModelMBTaxCountryConnection
  myMethodsByCountry(filter: ModelMBMyPaymentMethodFilterInput, limit: Int, nextToken: String, paymentMethodCountryID: ID, sortDirection: ModelSortDirection, userIDCreatedAt: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyConditionInput): ModelMBMyPaymentMethodConnection
  myRequestsFrequents(filter: ModelMBContactFilterInput, invitingID: ID, limit: Int, myReceipts: ModelIntKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelMBContactConnection
  myShipmentsFrequents(filter: ModelMBContactFilterInput, invitingID: ID, limit: Int, myShipments: ModelIntKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelMBContactConnection
  paymentByType(createdAt: ModelStringKeyConditionInput, filter: ModelMBMyPaymentMethodFilterInput, limit: Int, nextToken: String, payType: String, sortDirection: ModelSortDirection): ModelMBMyPaymentMethodConnection
  paymentMethodByCode(code: String, filter: ModelMBPaymentMethodFilterInput, limit: Int, name: ModelStringKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelMBPaymentMethodConnection
  queryMBUserOqkpjuho2ngvbonruy7shv26zuPresByByCodeData(after: String, first: Int, nickname: String!): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
  queryMBUserOqkpjuho2ngvbonruy7shv26zuPresByByEmail(after: String, email: String!, first: Int): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
  queryMBUserOqkpjuho2ngvbonruy7shv26zuPresByByIdentification(after: String, first: Int, identificationNumber: String!): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
  queryMBUserOqkpjuho2ngvbonruy7shv26zuPresByByNickname(after: String, first: Int, nickname: String!): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
  queryMBUserOqkpjuho2ngvbonruy7shv26zuPresByByPhoneNumber(after: String, first: Int, phoneNumber: String!): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
  queryMBUserOqkpjuho2ngvbonruy7shv26zuPresByListAllUsers(after: String, first: Int, type: String!): MBUserOqkpjuho2ngvbonruy7shv26zuPreConnection
}

type Subscription {
  onCreateFileUploadBank: FileUploadBank @aws_subscribe(mutations : ["createFileUploadBank"])
  onCreateMBBlinkCostByPrice(blinkCost: String, id: ID, range: String): MBBlinkCostByPrice @aws_subscribe(mutations : ["createMBBlinkCostByPrice"])
  onCreateMBBlinkPay: MBBlinkPay @aws_subscribe(mutations : ["createMBBlinkPay"])
  onCreateMBBlinkSettings: MBBlinkSettings @aws_subscribe(mutations : ["createMBBlinkSettings"])
  onCreateMBBlinkUser: MBBlinkUser @aws_subscribe(mutations : ["createMBBlinkUser"])
  onCreateMBCard(cardId: String, cardNumber: String, expirationDate: String, id: String, nameCard: String): MBCard @aws_subscribe(mutations : ["createMBCard"])
  onCreateMBChargeCountry: MBChargeCountry @aws_subscribe(mutations : ["createMBChargeCountry"])
  onCreateMBCheckbookUser(checkbookData: AWSJSON, createdAt: String, id: String, userID: String): MBCheckbookUser @aws_subscribe(mutations : ["createMBCheckbookUser"])
  onCreateMBCode: MBCode @aws_subscribe(mutations : ["createMBCode"])
  onCreateMBContact: MBContact @aws_subscribe(mutations : ["createMBContact"])
  onCreateMBCorresponsalChargues(blinkCost: String, id: String, range: String): MBCorresponsalChargues @aws_subscribe(mutations : ["createMBCorresponsalChargues"])
  onCreateMBCorresponsalRequests(createdAt: AWSDateTime, id: String, status: String, updatedAt: AWSDateTime, userID: String): MBCorresponsalRequests @aws_subscribe(mutations : ["createMBCorresponsalRequests"])
  onCreateMBCorresponsalTx(code: String, createdAt: AWSDateTime, customerID: String, id: ID, transactionType: String): MBCorresponsalTx @aws_subscribe(mutations : ["createMBCorresponsalTx"])
  onCreateMBCountry: MBCountry @aws_subscribe(mutations : ["createMBCountry"])
  onCreateMBDownloadBlink: MBDownloadBlink @aws_subscribe(mutations : ["createMBDownloadBlink"])
  onCreateMBFinancialData: MBFinancialData @aws_subscribe(mutations : ["createMBFinancialData"])
  onCreateMBMyPaymentMethod: MBMyPaymentMethod @aws_subscribe(mutations : ["createMBMyPaymentMethod"])
  onCreateMBNotification: MBNotification @aws_subscribe(mutations : ["createMBNotification"])
  onCreateMBPay: MBPay @aws_subscribe(mutations : ["createMBPay"])
  onCreateMBPaymentMethod: MBPaymentMethod @aws_subscribe(mutations : ["createMBPaymentMethod"])
  onCreateMBPaymentMethodCountry: MBPaymentMethodCountry @aws_subscribe(mutations : ["createMBPaymentMethodCountry"])
  onCreateMBSettings: MBSettings @aws_subscribe(mutations : ["createMBSettings"])
  onCreateMBSettingsCard(id: String, isActive: Boolean, isUseToPay: Boolean, settings: AWSJSON, type: String): MBSettingsCard @aws_subscribe(mutations : ["createMBSettingsCard"])
  onCreateMBTaxCountry: MBTaxCountry @aws_subscribe(mutations : ["createMBTaxCountry"])
  onCreateMBTransaction: MBTransaction @aws_subscribe(mutations : ["createMBTransaction"])
  onCreateMBTransactionPay: MBTransactionPay @aws_subscribe(mutations : ["createMBTransactionPay"])
  onCreateMBUser: MBUser @aws_subscribe(mutations : ["createMBUser"])
  onCreateMBUserOqkpjuho2ngvbonruy7shv26zuPre(createdAt: String, email: String, fullName: String, id: String, identificationNumber: String): MBUserOqkpjuho2ngvbonruy7shv26zuPre @aws_subscribe(mutations : ["createMBUserOqkpjuho2ngvbonruy7shv26zuPre"])
  onCreateMBUserPartiesAML(createdAt: String, deletedAt: String, id: String, partyID: String, settings: AWSJSON): MBUserPartiesAML @aws_subscribe(mutations : ["createMBUserPartiesAML"])
  onCreateModelMBUserVerified(apiResultCode: String, apiResultMessage: String, errorCode: String, id: ID, transactionID: String): ModelMBUserVerified @aws_subscribe(mutations : ["createModelMBUserVerified"])
  onDeleteFileUploadBank: FileUploadBank @aws_subscribe(mutations : ["deleteFileUploadBank"])
  onDeleteMBBlinkCostByPrice(blinkCost: String, id: ID, range: String): MBBlinkCostByPrice @aws_subscribe(mutations : ["deleteMBBlinkCostByPrice"])
  onDeleteMBBlinkPay: MBBlinkPay @aws_subscribe(mutations : ["deleteMBBlinkPay"])
  onDeleteMBBlinkSettings: MBBlinkSettings @aws_subscribe(mutations : ["deleteMBBlinkSettings"])
  onDeleteMBBlinkUser: MBBlinkUser @aws_subscribe(mutations : ["deleteMBBlinkUser"])
  onDeleteMBCard(cardId: String, cardNumber: String, expirationDate: String, id: String, nameCard: String): MBCard @aws_subscribe(mutations : ["deleteMBCard"])
  onDeleteMBChargeCountry: MBChargeCountry @aws_subscribe(mutations : ["deleteMBChargeCountry"])
  onDeleteMBCheckbookUser(checkbookData: AWSJSON, createdAt: String, id: String, userID: String): MBCheckbookUser @aws_subscribe(mutations : ["deleteMBCheckbookUser"])
  onDeleteMBCode: MBCode @aws_subscribe(mutations : ["deleteMBCode"])
  onDeleteMBContact: MBContact @aws_subscribe(mutations : ["deleteMBContact"])
  onDeleteMBCorresponsalChargues(blinkCost: String, id: String, range: String): MBCorresponsalChargues @aws_subscribe(mutations : ["deleteMBCorresponsalChargues"])
  onDeleteMBCorresponsalRequests(createdAt: AWSDateTime, id: String, status: String, updatedAt: AWSDateTime, userID: String): MBCorresponsalRequests @aws_subscribe(mutations : ["deleteMBCorresponsalRequests"])
  onDeleteMBCorresponsalTx(code: String, createdAt: AWSDateTime, customerID: String, id: ID, transactionType: String): MBCorresponsalTx @aws_subscribe(mutations : ["deleteMBCorresponsalTx"])
  onDeleteMBCountry: MBCountry @aws_subscribe(mutations : ["deleteMBCountry"])
  onDeleteMBDownloadBlink: MBDownloadBlink @aws_subscribe(mutations : ["deleteMBDownloadBlink"])
  onDeleteMBFinancialData: MBFinancialData @aws_subscribe(mutations : ["deleteMBFinancialData"])
  onDeleteMBMyPaymentMethod: MBMyPaymentMethod @aws_subscribe(mutations : ["deleteMBMyPaymentMethod"])
  onDeleteMBNotification: MBNotification @aws_subscribe(mutations : ["deleteMBNotification"])
  onDeleteMBPay: MBPay @aws_subscribe(mutations : ["deleteMBPay"])
  onDeleteMBPaymentMethod: MBPaymentMethod @aws_subscribe(mutations : ["deleteMBPaymentMethod"])
  onDeleteMBPaymentMethodCountry: MBPaymentMethodCountry @aws_subscribe(mutations : ["deleteMBPaymentMethodCountry"])
  onDeleteMBSettings: MBSettings @aws_subscribe(mutations : ["deleteMBSettings"])
  onDeleteMBSettingsCard(id: String, isActive: Boolean, isUseToPay: Boolean, settings: AWSJSON, type: String): MBSettingsCard @aws_subscribe(mutations : ["deleteMBSettingsCard"])
  onDeleteMBTaxCountry: MBTaxCountry @aws_subscribe(mutations : ["deleteMBTaxCountry"])
  onDeleteMBTransaction: MBTransaction @aws_subscribe(mutations : ["deleteMBTransaction"])
  onDeleteMBTransactionPay: MBTransactionPay @aws_subscribe(mutations : ["deleteMBTransactionPay"])
  onDeleteMBUser: MBUser @aws_subscribe(mutations : ["deleteMBUser"])
  onDeleteMBUserOqkpjuho2ngvbonruy7shv26zuPre(createdAt: String, email: String, fullName: String, id: String, identificationNumber: String): MBUserOqkpjuho2ngvbonruy7shv26zuPre @aws_subscribe(mutations : ["deleteMBUserOqkpjuho2ngvbonruy7shv26zuPre"])
  onDeleteMBUserPartiesAML(createdAt: String, deletedAt: String, id: String, partyID: String, settings: AWSJSON): MBUserPartiesAML @aws_subscribe(mutations : ["deleteMBUserPartiesAML"])
  onDeleteModelMBUserVerified(apiResultCode: String, apiResultMessage: String, errorCode: String, id: ID, transactionID: String): ModelMBUserVerified @aws_subscribe(mutations : ["deleteModelMBUserVerified"])
  onUpdateFileUploadBank: FileUploadBank @aws_subscribe(mutations : ["updateFileUploadBank"])
  onUpdateMBBlinkCostByPrice(blinkCost: String, id: ID, range: String): MBBlinkCostByPrice @aws_subscribe(mutations : ["updateMBBlinkCostByPrice"])
  onUpdateMBBlinkPay: MBBlinkPay @aws_subscribe(mutations : ["updateMBBlinkPay"])
  onUpdateMBBlinkSettings: MBBlinkSettings @aws_subscribe(mutations : ["updateMBBlinkSettings"])
  onUpdateMBBlinkUser: MBBlinkUser @aws_subscribe(mutations : ["updateMBBlinkUser"])
  onUpdateMBCard(cardId: String, cardNumber: String, expirationDate: String, id: String, nameCard: String): MBCard @aws_subscribe(mutations : ["updateMBCard"])
  onUpdateMBChargeCountry: MBChargeCountry @aws_subscribe(mutations : ["updateMBChargeCountry"])
  onUpdateMBCheckbookUser(checkbookData: AWSJSON, createdAt: String, id: String, userID: String): MBCheckbookUser @aws_subscribe(mutations : ["updateMBCheckbookUser"])
  onUpdateMBCode: MBCode @aws_subscribe(mutations : ["updateMBCode"])
  onUpdateMBContact: MBContact @aws_subscribe(mutations : ["updateMBContact"])
  onUpdateMBCorresponsalChargues(blinkCost: String, id: String, range: String): MBCorresponsalChargues @aws_subscribe(mutations : ["updateMBCorresponsalChargues"])
  onUpdateMBCorresponsalRequests(createdAt: AWSDateTime, id: String, status: String, updatedAt: AWSDateTime, userID: String): MBCorresponsalRequests @aws_subscribe(mutations : ["updateMBCorresponsalRequests"])
  onUpdateMBCorresponsalTx(code: String, createdAt: AWSDateTime, customerID: String, id: ID, transactionType: String): MBCorresponsalTx @aws_subscribe(mutations : ["updateMBCorresponsalTx"])
  onUpdateMBCountry: MBCountry @aws_subscribe(mutations : ["updateMBCountry"])
  onUpdateMBDownloadBlink: MBDownloadBlink @aws_subscribe(mutations : ["updateMBDownloadBlink"])
  onUpdateMBFinancialData: MBFinancialData @aws_subscribe(mutations : ["updateMBFinancialData"])
  onUpdateMBMyPaymentMethod: MBMyPaymentMethod @aws_subscribe(mutations : ["updateMBMyPaymentMethod"])
  onUpdateMBNotification: MBNotification @aws_subscribe(mutations : ["updateMBNotification"])
  onUpdateMBPay: MBPay @aws_subscribe(mutations : ["updateMBPay"])
  onUpdateMBPaymentMethod: MBPaymentMethod @aws_subscribe(mutations : ["updateMBPaymentMethod"])
  onUpdateMBPaymentMethodCountry: MBPaymentMethodCountry @aws_subscribe(mutations : ["updateMBPaymentMethodCountry"])
  onUpdateMBSettings: MBSettings @aws_subscribe(mutations : ["updateMBSettings"])
  onUpdateMBSettingsCard(id: String, isActive: Boolean, isUseToPay: Boolean, settings: AWSJSON, type: String): MBSettingsCard @aws_subscribe(mutations : ["updateMBSettingsCard"])
  onUpdateMBTaxCountry: MBTaxCountry @aws_subscribe(mutations : ["updateMBTaxCountry"])
  onUpdateMBTransaction: MBTransaction @aws_subscribe(mutations : ["updateMBTransaction"])
  onUpdateMBTransactionPay: MBTransactionPay @aws_subscribe(mutations : ["updateMBTransactionPay"])
  onUpdateMBUser: MBUser @aws_subscribe(mutations : ["updateMBUser"])
  onUpdateMBUserOqkpjuho2ngvbonruy7shv26zuPre(createdAt: String, email: String, fullName: String, id: String, identificationNumber: String): MBUserOqkpjuho2ngvbonruy7shv26zuPre @aws_subscribe(mutations : ["updateMBUserOqkpjuho2ngvbonruy7shv26zuPre"])
  onUpdateMBUserPartiesAML(createdAt: String, deletedAt: String, id: String, partyID: String, settings: AWSJSON): MBUserPartiesAML @aws_subscribe(mutations : ["updateMBUserPartiesAML"])
  onUpdateModelMBUserVerified(apiResultCode: String, apiResultMessage: String, errorCode: String, id: ID, transactionID: String): ModelMBUserVerified @aws_subscribe(mutations : ["updateModelMBUserVerified"])
}

enum CodeType {
  DOWN_MONEY_CASH
  INVITATION
  TX
  UP_MONEY_CASH
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

enum PMStatus {
  ACTIVE
  BLOCKED
  INACTIVE
  REMOVE
}

enum SmsStatus {
  DELIVERY
  DEPLOYED
  FAILED
  QUEUED
  SEND
  UNDELIVERY
}

enum TxStatus {
  CONFIRM
  DOWNLOAD
  DOWN_CASH
  REJECT
  REQUEST
  SEND
  SHARED
  STANDBY
  UP_CASH
}

enum TxType {
  DOWN_MONEY_CASH
  REQUEST
  SEND
  SEND_REQUEST
  TX_REJECTED
  UP_MONEY_CASH
}

input CreateFileUploadBankInput {
  createdAt: AWSDateTime
  fileName: String!
  fileType: String!
  id: ID
  isDownload: Boolean!
  location: String!
  processedAt: AWSDateTime
  processedBy: String
  type: String!
  updatedAt: AWSDateTime
}

input CreateMBBlinkCostByPriceInput {
  blinkCost: String
  range: String
}

input CreateMBBlinkPayInput {
  blinkID: ID!
  createdAt: AWSDateTime
  id: ID
  payID: ID!
  type: String!
  userID: ID!
}

input CreateMBBlinkSettingsInput {
  blinkCost: Float!
  countryID: ID!
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  isoStateCode: String!
  promotionalCount: Int!
  settings: AWSJSON!
  type: String!
  updatedAt: AWSDateTime
}

input CreateMBBlinkUserInput {
  blinkAcquired: Int!
  blinkAvailable: Int!
  blinkPrice: Float!
  blinkSettingID: ID!
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  isPromotional: Boolean!
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBCardInput {
  cardId: String
  cardNumber: String
  createdAt: AWSDateTime
  currencyCode: String
  description: String
  expirationDate: String
  id: String
  isActive: Boolean
  isUsedPayment: Boolean
  label: String
  nameCard: String
  payType: String
  paymentMethod: AWSJSON
  paymentMethodCountryID: String
  transactionType: String
  updatedAt: AWSDateTime
  userID: String
}

input CreateMBChargeCountryInput {
  chargeCode: String!
  countryID: ID!
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  isActive: Boolean!
  isBlinkPay: Boolean!
  isReceipt: Boolean!
  isShipping: Boolean!
  settings: AWSJSON!
  showOrder: String!
  total: Float!
  translate: AWSJSON!
  updatedAt: AWSDateTime
}

input CreateMBCheckbookUserInput {
  checkbookData: AWSJSON!
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBCodeInput {
  code: String!
  codeType: CodeType!
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID
  isUsed: Boolean!
  isUserUsed: Boolean
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBContactInput {
  code: String
  codeID: ID
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID
  invitedID: ID!
  invitingID: ID!
  isFavorite: Boolean!
  myReceipts: Int!
  myShipments: Int!
  updatedAt: AWSDateTime
}

input CreateMBCorresponsalCharguesInput {
  blinkCost: String
  id: String!
  range: String
}

input CreateMBCorresponsalRequestsInput {
  createdAt: AWSDateTime
  id: String
  status: String
  updatedAt: AWSDateTime
  userID: String
}

input CreateMBCorresponsalSettingsInput {
  id: ID
  userId: String
  value: String
}

input CreateMBCorresponsalTxInput {
  amount: String
  amountwc: String
  code: String
  commission: String
  corresponsalID: String
  createdAt: AWSDateTime
  customerID: String
  id: ID
  transactionType: String
  updatedAt: AWSDateTime
}

input CreateMBCountryInput {
  alpha2Code: String!
  alpha3Code: String!
  countryStateId: ID
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  isActive: Boolean!
  isDownload: Boolean!
  name: String!
  settings: AWSJSON!
  showOrder: String!
  translate: AWSJSON!
  type: String!
  updatedAt: AWSDateTime
}

input CreateMBDeletedUserInput {
  createdAt: AWSDateTime
  id: ID
  reason: String
  userID: String
}

input CreateMBDownloadBlinkInput {
  amount: Float!
  batchCatch: AWSDateTime
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  paymentMethod: String!
  paymentMethodId: String!
  processAt: AWSDateTime
  stateCode: String!
  txID: ID!
  type: String!
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBFinancialDataInput {
  amount: Float!
  blinks: Int!
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  isActive: Boolean!
  type: String!
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBMyPaymentMethodInput {
  accountId: String!
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  description: String
  id: ID
  isActive: Boolean!
  isUsedPayment: Boolean!
  label: String!
  payType: String!
  paymentMethodCountryID: ID!
  settings: AWSJSON!
  updatedAt: AWSDateTime
  userID: ID!
  value: String!
}

input CreateMBNotificationInput {
  createdAt: AWSDateTime
  data: AWSJSON!
  id: ID
  isRead: Boolean!
  message: String!
  title: String!
  type: String!
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBPayInput {
  amount: Float!
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  exchangeAmount: Float
  exchangeCurrency: String
  exchangeRate: Float
  id: ID
  paymentID: ID
  paymentMethodCountry: String!
  type: String!
  updatedAt: AWSDateTime
  userID: ID!
}

input CreateMBPaymentMethodCountryInput {
  alpha2Code: String!
  alpha3Code: String!
  availableFromAt: AWSDate!
  availableUntilAt: AWSDate
  costCenterID: ID!
  createdAt: AWSDateTime
  id: ID
  isActive: Boolean!
  isReceipt: Boolean!
  isShipping: Boolean!
  paymentMethodID: ID!
  paymentTypeCode: String!
  settings: AWSJSON!
  updatedAt: AWSDateTime
}

input CreateMBPaymentMethodInput {
  code: String!
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID
  name: String!
  translate: AWSJSON!
  updatedAt: AWSDateTime
}

input CreateMBSettingsCardInput {
  id: String!
  isActive: Boolean
  isUseToPay: Boolean
  settings: AWSJSON
  type: String
  typeCard: String
}

input CreateMBSettingsInput {
  alpha2Code: String!
  alpha3Code: String!
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID
  isActive: Boolean!
  platform: String!
  settings: AWSJSON!
  updatedAt: AWSDateTime
}

input CreateMBTaxCountryInput {
  countryID: ID!
  createdAt: AWSDateTime
  currency: String!
  deletedAt: AWSDateTime
  id: ID
  isActive: Boolean!
  isBlinkPay: Boolean!
  isReceipt: Boolean!
  isShipping: Boolean!
  settings: AWSJSON!
  showOrder: String!
  taxCode: String!
  total: Float!
  translate: AWSJSON!
  updatedAt: AWSDateTime
}

input CreateMBTransactionInput {
  amount: Float!
  amountDeposit: Float!
  charges: Float!
  codeID: ID!
  createdAt: AWSDateTime
  currency: String!
  currencyDeposit: String!
  deletedAt: AWSDateTime
  id: ID
  isConfirm: Boolean!
  isReceipt: Boolean
  message: String
  receiptID: ID
  requestMessage: String
  shippingID: ID!
  taxes: Float!
  txStatus: TxStatus!
  txType: TxType!
  txValues: AWSJSON!
  type: String!
  updatedAt: AWSDateTime
}

input CreateMBTransactionPayInput {
  createdAt: AWSDateTime
  id: ID
  payID: ID!
  txID: ID!
  type: String!
  userID: ID!
}

input CreateMBUserInput {
  acceptedPromotionalInfo: Boolean
  acceptedRequestBlink: Boolean
  address: String
  alpha2Code: String
  alpha3Code: String
  avatarUrl: String
  birthDate: AWSDateTime
  checkEmail: Boolean!
  checkPhone: Boolean!
  city: String
  cognitoUserId: ID!
  country: String
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  deviceToken: String
  email: AWSEmail!
  fullName: String!
  id: ID
  idcheckbookID: ID
  identificationBackUrl: String
  identificationNumber: String
  identificationType: String
  identificationUrl: String
  isAvailabilityTx: Boolean!
  isMFA: Boolean
  isTerms: Boolean!
  isUpdateAccount: Boolean
  isUsedMoneyBlinkAmount: Boolean
  locale: String!
  nickname: String!
  oldAvatarUrl: String
  oldIdentificationBackUrl: String
  oldIdentificationUrl: String
  phoneNumber: String!
  role: String
  state: String
  type: String!
  updatedAt: AWSDateTime
  zipCode: String
}

input CreateMBUserOqkpjuho2ngvbonruy7shv26zuPreInput {
  createdAt: String
  email: String
  fullName: String
  id: String!
  identificationNumber: String
  nickname: String
  phoneNumber: String
  type: String
}

input CreateMBUserPartiesAMLInput {
  createdAt: String
  deletedAt: String
  id: String!
  partyID: String
  settings: AWSJSON
  status: String
  updatedAt: String
  userID: String
}

input CreateModelMBUserVerifiedInput {
  apiResultCode: String
  apiResultMessage: String
  counterRequested: String
  createdAt: String
  deletedAt: AWSDate
  emailSent: Boolean
  errorCode: String
  id: ID!
  status: String
  transactionID: String
  typeVerification: String
  updatedAt: AWSDate
  userID: String
  verified: String
  verifiedBy: String
  workflowID: String
}

input DeleteFileUploadBankInput {
  id: ID!
}

input DeleteMBBlinkCostByPriceInput {
  id: ID!
}

input DeleteMBBlinkPayInput {
  id: ID!
}

input DeleteMBBlinkSettingsInput {
  id: ID!
}

input DeleteMBBlinkUserInput {
  id: ID!
}

input DeleteMBCardInput {
  id: String!
}

input DeleteMBChargeCountryInput {
  id: ID!
}

input DeleteMBCheckbookUserInput {
  id: ID!
}

input DeleteMBCodeInput {
  id: ID!
}

input DeleteMBContactInput {
  id: ID!
}

input DeleteMBCorresponsalCharguesInput {
  id: String!
}

input DeleteMBCorresponsalRequestsInput {
  id: String!
}

input DeleteMBCorresponsalTxInput {
  id: ID!
}

input DeleteMBCountryInput {
  id: ID!
}

input DeleteMBDownloadBlinkInput {
  id: ID!
}

input DeleteMBFinancialDataInput {
  id: ID!
}

input DeleteMBMyPaymentMethodInput {
  id: ID!
}

input DeleteMBNotificationInput {
  id: ID!
}

input DeleteMBPayInput {
  id: ID!
}

input DeleteMBPaymentMethodCountryInput {
  id: ID!
}

input DeleteMBPaymentMethodInput {
  id: ID!
}

input DeleteMBSettingsCardInput {
  id: String!
}

input DeleteMBSettingsInput {
  id: ID!
}

input DeleteMBTaxCountryInput {
  id: ID!
}

input DeleteMBTransactionInput {
  id: ID!
}

input DeleteMBTransactionPayInput {
  id: ID!
}

input DeleteMBUserInput {
  id: ID!
}

input DeleteMBUserOqkpjuho2ngvbonruy7shv26zuPreInput {
  id: String!
}

input DeleteMBUserPartiesAMLInput {
  id: String!
}

input DeleteModelMBUserVerifiedInput {
  id: ID!
}

input MBCheckbookUserConditionInput {
  checkbookData: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input MBCorresponsalTxConditionInput {
  amount: ModelIntInput
  code: ModelStringInput
  commission: ModelStringInput
  corresponsalID: ModelIDInput
  createdAt: ModelStringInput
  customerID: ModelIDInput
  transactionType: ModelStringInput
  updatedAt: ModelStringInput
}

input MBDeletedUserConditionInput {
  createdAt: ModelStringInput
  reason: ModelStringInput
  userID: ModelIDInput
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelCodeTypeInput {
  eq: CodeType
  ne: CodeType
}

input ModelFileUploadBankConditionInput {
  and: [ModelFileUploadBankConditionInput]
  createdAt: ModelStringInput
  fileName: ModelStringInput
  fileType: ModelStringInput
  isDownload: ModelBooleanInput
  location: ModelStringInput
  not: ModelFileUploadBankConditionInput
  or: [ModelFileUploadBankConditionInput]
  processedAt: ModelStringInput
  processedBy: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelFileUploadBankFilterInput {
  and: [ModelFileUploadBankFilterInput]
  createdAt: ModelStringInput
  fileName: ModelStringInput
  fileType: ModelStringInput
  id: ModelIDInput
  isDownload: ModelBooleanInput
  location: ModelStringInput
  not: ModelFileUploadBankFilterInput
  or: [ModelFileUploadBankFilterInput]
  processedAt: ModelStringInput
  processedBy: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIDKeyConditionInput {
  beginsWith: ID
  between: [ID]
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelIntKeyConditionInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
}

input ModelMBBlinkPayConditionInput {
  and: [ModelMBBlinkPayConditionInput]
  blinkID: ModelIDInput
  createdAt: ModelStringInput
  not: ModelMBBlinkPayConditionInput
  or: [ModelMBBlinkPayConditionInput]
  payID: ModelIDInput
  type: ModelStringInput
  userID: ModelIDInput
}

input ModelMBBlinkPayFilterInput {
  and: [ModelMBBlinkPayFilterInput]
  blinkID: ModelIDInput
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelMBBlinkPayFilterInput
  or: [ModelMBBlinkPayFilterInput]
  payID: ModelIDInput
  type: ModelStringInput
  userID: ModelIDInput
}

input ModelMBBlinkSettingsConditionInput {
  and: [ModelMBBlinkSettingsConditionInput]
  blinkCost: ModelFloatInput
  countryID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  isoStateCode: ModelStringInput
  not: ModelMBBlinkSettingsConditionInput
  or: [ModelMBBlinkSettingsConditionInput]
  promotionalCount: ModelIntInput
  settings: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBBlinkSettingsFilterInput {
  and: [ModelMBBlinkSettingsFilterInput]
  blinkCost: ModelFloatInput
  countryID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isoStateCode: ModelStringInput
  not: ModelMBBlinkSettingsFilterInput
  or: [ModelMBBlinkSettingsFilterInput]
  promotionalCount: ModelIntInput
  settings: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBBlinkUserConditionInput {
  and: [ModelMBBlinkUserConditionInput]
  blinkAcquired: ModelIntInput
  blinkAvailable: ModelIntInput
  blinkPrice: ModelFloatInput
  blinkSettingID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  isPromotional: ModelBooleanInput
  not: ModelMBBlinkUserConditionInput
  or: [ModelMBBlinkUserConditionInput]
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBBlinkUserFilterInput {
  and: [ModelMBBlinkUserFilterInput]
  blinkAcquired: ModelIntInput
  blinkAvailable: ModelIntInput
  blinkPrice: ModelFloatInput
  blinkSettingID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isPromotional: ModelBooleanInput
  not: ModelMBBlinkUserFilterInput
  or: [ModelMBBlinkUserFilterInput]
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBChargeCountryConditionInput {
  and: [ModelMBChargeCountryConditionInput]
  chargeCode: ModelStringInput
  countryID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  isActive: ModelBooleanInput
  isBlinkPay: ModelBooleanInput
  isReceipt: ModelBooleanInput
  isShipping: ModelBooleanInput
  not: ModelMBChargeCountryConditionInput
  or: [ModelMBChargeCountryConditionInput]
  settings: ModelStringInput
  showOrder: ModelStringInput
  total: ModelFloatInput
  translate: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBChargeCountryFilterInput {
  and: [ModelMBChargeCountryFilterInput]
  chargeCode: ModelStringInput
  countryID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  isBlinkPay: ModelBooleanInput
  isReceipt: ModelBooleanInput
  isShipping: ModelBooleanInput
  not: ModelMBChargeCountryFilterInput
  or: [ModelMBChargeCountryFilterInput]
  settings: ModelStringInput
  showOrder: ModelStringInput
  total: ModelFloatInput
  translate: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBCodeConditionInput {
  and: [ModelMBCodeConditionInput]
  code: ModelStringInput
  codeType: ModelCodeTypeInput
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  isUsed: ModelBooleanInput
  isUserUsed: ModelBooleanInput
  not: ModelMBCodeConditionInput
  or: [ModelMBCodeConditionInput]
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBCodeFilterInput {
  and: [ModelMBCodeFilterInput]
  code: ModelStringInput
  codeType: ModelCodeTypeInput
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isUsed: ModelBooleanInput
  isUserUsed: ModelBooleanInput
  not: ModelMBCodeFilterInput
  or: [ModelMBCodeFilterInput]
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBContactConditionInput {
  and: [ModelMBContactConditionInput]
  code: ModelStringInput
  codeID: ModelIDInput
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  invitedID: ModelIDInput
  invitingID: ModelIDInput
  isFavorite: ModelBooleanInput
  myReceipts: ModelIntInput
  myShipments: ModelIntInput
  not: ModelMBContactConditionInput
  or: [ModelMBContactConditionInput]
  updatedAt: ModelStringInput
}

input ModelMBContactFilterInput {
  and: [ModelMBContactFilterInput]
  code: ModelStringInput
  codeID: ModelIDInput
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  invitedID: ModelIDInput
  invitingID: ModelIDInput
  isFavorite: ModelBooleanInput
  myReceipts: ModelIntInput
  myShipments: ModelIntInput
  not: ModelMBContactFilterInput
  or: [ModelMBContactFilterInput]
  updatedAt: ModelStringInput
}

input ModelMBCorresponsalSettingsConditionInput {
  userId: ModelIDInput
  value: ModelStringInput
}

input ModelMBCountryConditionInput {
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBCountryConditionInput]
  countryStateId: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  isActive: ModelBooleanInput
  isDownload: ModelBooleanInput
  name: ModelStringInput
  not: ModelMBCountryConditionInput
  or: [ModelMBCountryConditionInput]
  settings: ModelStringInput
  showOrder: ModelStringInput
  translate: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBCountryFilterInput {
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBCountryFilterInput]
  countryStateId: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  isDownload: ModelBooleanInput
  name: ModelStringInput
  not: ModelMBCountryFilterInput
  or: [ModelMBCountryFilterInput]
  settings: ModelStringInput
  showOrder: ModelStringInput
  translate: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBDownloadBlinkConditionInput {
  amount: ModelFloatInput
  and: [ModelMBDownloadBlinkConditionInput]
  batchCatch: ModelStringInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  not: ModelMBDownloadBlinkConditionInput
  or: [ModelMBDownloadBlinkConditionInput]
  paymentMethod: ModelStringInput
  paymentMethodId: ModelStringInput
  processAt: ModelStringInput
  stateCode: ModelStringInput
  txID: ModelIDInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBDownloadBlinkFilterInput {
  amount: ModelFloatInput
  and: [ModelMBDownloadBlinkFilterInput]
  batchCatch: ModelStringInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  not: ModelMBDownloadBlinkFilterInput
  or: [ModelMBDownloadBlinkFilterInput]
  paymentMethod: ModelStringInput
  paymentMethodId: ModelStringInput
  processAt: ModelStringInput
  stateCode: ModelStringInput
  txID: ModelIDInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBFinancialDataConditionInput {
  amount: ModelFloatInput
  and: [ModelMBFinancialDataConditionInput]
  blinks: ModelIntInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  isActive: ModelBooleanInput
  not: ModelMBFinancialDataConditionInput
  or: [ModelMBFinancialDataConditionInput]
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBFinancialDataFilterInput {
  amount: ModelFloatInput
  and: [ModelMBFinancialDataFilterInput]
  blinks: ModelIntInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  not: ModelMBFinancialDataFilterInput
  or: [ModelMBFinancialDataFilterInput]
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBMyPaymentMethodByPaymentUserCompositeKeyConditionInput {
  beginsWith: ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput
  between: [ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput]
  eq: ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput
  ge: ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput
  gt: ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput
  le: ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput
  lt: ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput
}

input ModelMBMyPaymentMethodByPaymentUserCompositeKeyInput {
  createdAt: String
  paymentMethodCountryID: ID
}

input ModelMBMyPaymentMethodConditionInput {
  accountId: ModelStringInput
  and: [ModelMBMyPaymentMethodConditionInput]
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  description: ModelStringInput
  isActive: ModelBooleanInput
  isUsedPayment: ModelBooleanInput
  label: ModelStringInput
  not: ModelMBMyPaymentMethodConditionInput
  or: [ModelMBMyPaymentMethodConditionInput]
  payType: ModelStringInput
  paymentMethodCountryID: ModelIDInput
  settings: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
  value: ModelStringInput
}

input ModelMBMyPaymentMethodFilterInput {
  accountId: ModelStringInput
  and: [ModelMBMyPaymentMethodFilterInput]
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  description: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  isUsedPayment: ModelBooleanInput
  label: ModelStringInput
  not: ModelMBMyPaymentMethodFilterInput
  or: [ModelMBMyPaymentMethodFilterInput]
  payType: ModelStringInput
  paymentMethodCountryID: ModelIDInput
  settings: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
  value: ModelStringInput
}

input ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyConditionInput {
  beginsWith: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput
  between: [ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput]
  eq: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput
  ge: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput
  gt: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput
  le: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput
  lt: ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput
}

input ModelMBMyPaymentMethodMyMethodsByCountryCompositeKeyInput {
  createdAt: String
  userID: ID
}

input ModelMBNotificationConditionInput {
  and: [ModelMBNotificationConditionInput]
  createdAt: ModelStringInput
  data: ModelStringInput
  isRead: ModelBooleanInput
  message: ModelStringInput
  not: ModelMBNotificationConditionInput
  or: [ModelMBNotificationConditionInput]
  title: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBNotificationFilterInput {
  and: [ModelMBNotificationFilterInput]
  createdAt: ModelStringInput
  data: ModelStringInput
  id: ModelIDInput
  isRead: ModelBooleanInput
  message: ModelStringInput
  not: ModelMBNotificationFilterInput
  or: [ModelMBNotificationFilterInput]
  title: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBPayConditionInput {
  amount: ModelFloatInput
  and: [ModelMBPayConditionInput]
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  exchangeAmount: ModelFloatInput
  exchangeCurrency: ModelStringInput
  exchangeRate: ModelFloatInput
  not: ModelMBPayConditionInput
  or: [ModelMBPayConditionInput]
  paymentID: ModelIDInput
  paymentMethodCountry: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBPayFilterInput {
  amount: ModelFloatInput
  and: [ModelMBPayFilterInput]
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  exchangeAmount: ModelFloatInput
  exchangeCurrency: ModelStringInput
  exchangeRate: ModelFloatInput
  id: ModelIDInput
  not: ModelMBPayFilterInput
  or: [ModelMBPayFilterInput]
  paymentID: ModelIDInput
  paymentMethodCountry: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  userID: ModelIDInput
}

input ModelMBPaymentMethodConditionInput {
  and: [ModelMBPaymentMethodConditionInput]
  code: ModelStringInput
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  name: ModelStringInput
  not: ModelMBPaymentMethodConditionInput
  or: [ModelMBPaymentMethodConditionInput]
  translate: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBPaymentMethodCountryByCostCenterCompositeKeyConditionInput {
  beginsWith: ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput
  between: [ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput]
  eq: ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput
  ge: ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput
  gt: ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput
  le: ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput
  lt: ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput
}

input ModelMBPaymentMethodCountryByCostCenterCompositeKeyInput {
  availableFromAt: String
  paymentMethodID: ID
}

input ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyConditionInput {
  beginsWith: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput
  between: [ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput]
  eq: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput
  ge: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput
  gt: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput
  le: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput
  lt: ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput
}

input ModelMBPaymentMethodCountryByPaymentMethodCompositeKeyInput {
  availableFromAt: String
  costCenterID: ID
}

input ModelMBPaymentMethodCountryConditionInput {
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBPaymentMethodCountryConditionInput]
  availableFromAt: ModelStringInput
  availableUntilAt: ModelStringInput
  costCenterID: ModelIDInput
  createdAt: ModelStringInput
  isActive: ModelBooleanInput
  isReceipt: ModelBooleanInput
  isShipping: ModelBooleanInput
  not: ModelMBPaymentMethodCountryConditionInput
  or: [ModelMBPaymentMethodCountryConditionInput]
  paymentMethodID: ModelIDInput
  paymentTypeCode: ModelStringInput
  settings: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBPaymentMethodCountryFilterInput {
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBPaymentMethodCountryFilterInput]
  availableFromAt: ModelStringInput
  availableUntilAt: ModelStringInput
  costCenterID: ModelIDInput
  createdAt: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  isReceipt: ModelBooleanInput
  isShipping: ModelBooleanInput
  not: ModelMBPaymentMethodCountryFilterInput
  or: [ModelMBPaymentMethodCountryFilterInput]
  paymentMethodID: ModelIDInput
  paymentTypeCode: ModelStringInput
  settings: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBPaymentMethodFilterInput {
  and: [ModelMBPaymentMethodFilterInput]
  code: ModelStringInput
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelMBPaymentMethodFilterInput
  or: [ModelMBPaymentMethodFilterInput]
  translate: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBSettingsConditionInput {
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBSettingsConditionInput]
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  isActive: ModelBooleanInput
  not: ModelMBSettingsConditionInput
  or: [ModelMBSettingsConditionInput]
  platform: ModelStringInput
  settings: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBSettingsFilterInput {
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBSettingsFilterInput]
  createdAt: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  not: ModelMBSettingsFilterInput
  or: [ModelMBSettingsFilterInput]
  platform: ModelStringInput
  settings: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBTaxCountryConditionInput {
  and: [ModelMBTaxCountryConditionInput]
  countryID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  isActive: ModelBooleanInput
  isBlinkPay: ModelBooleanInput
  isReceipt: ModelBooleanInput
  isShipping: ModelBooleanInput
  not: ModelMBTaxCountryConditionInput
  or: [ModelMBTaxCountryConditionInput]
  settings: ModelStringInput
  showOrder: ModelStringInput
  taxCode: ModelStringInput
  total: ModelFloatInput
  translate: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBTaxCountryFilterInput {
  and: [ModelMBTaxCountryFilterInput]
  countryID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isActive: ModelBooleanInput
  isBlinkPay: ModelBooleanInput
  isReceipt: ModelBooleanInput
  isShipping: ModelBooleanInput
  not: ModelMBTaxCountryFilterInput
  or: [ModelMBTaxCountryFilterInput]
  settings: ModelStringInput
  showOrder: ModelStringInput
  taxCode: ModelStringInput
  total: ModelFloatInput
  translate: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBTransactionConditionInput {
  amount: ModelFloatInput
  amountDeposit: ModelFloatInput
  and: [ModelMBTransactionConditionInput]
  charges: ModelFloatInput
  codeID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  currencyDeposit: ModelStringInput
  deletedAt: ModelStringInput
  isConfirm: ModelBooleanInput
  isReceipt: ModelBooleanInput
  message: ModelStringInput
  not: ModelMBTransactionConditionInput
  or: [ModelMBTransactionConditionInput]
  receiptID: ModelIDInput
  requestMessage: ModelStringInput
  shippingID: ModelIDInput
  taxes: ModelFloatInput
  txStatus: ModelTxStatusInput
  txType: ModelTxTypeInput
  txValues: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBTransactionFilterInput {
  amount: ModelFloatInput
  amountDeposit: ModelFloatInput
  and: [ModelMBTransactionFilterInput]
  charges: ModelFloatInput
  codeID: ModelIDInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  currencyDeposit: ModelStringInput
  deletedAt: ModelStringInput
  id: ModelIDInput
  isConfirm: ModelBooleanInput
  isReceipt: ModelBooleanInput
  message: ModelStringInput
  not: ModelMBTransactionFilterInput
  or: [ModelMBTransactionFilterInput]
  receiptID: ModelIDInput
  requestMessage: ModelStringInput
  shippingID: ModelIDInput
  taxes: ModelFloatInput
  txStatus: ModelTxStatusInput
  txType: ModelTxTypeInput
  txValues: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelMBTransactionPayConditionInput {
  and: [ModelMBTransactionPayConditionInput]
  createdAt: ModelStringInput
  not: ModelMBTransactionPayConditionInput
  or: [ModelMBTransactionPayConditionInput]
  payID: ModelIDInput
  txID: ModelIDInput
  type: ModelStringInput
  userID: ModelIDInput
}

input ModelMBTransactionPayFilterInput {
  and: [ModelMBTransactionPayFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelMBTransactionPayFilterInput
  or: [ModelMBTransactionPayFilterInput]
  payID: ModelIDInput
  txID: ModelIDInput
  type: ModelStringInput
  userID: ModelIDInput
}

input ModelMBUserConditionInput {
  acceptedPromotionalInfo: ModelBooleanInput
  acceptedRequestBlink: ModelBooleanInput
  address: ModelStringInput
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBUserConditionInput]
  avatarUrl: ModelStringInput
  birthDate: ModelStringInput
  checkEmail: ModelBooleanInput
  checkPhone: ModelBooleanInput
  city: ModelStringInput
  cognitoUserId: ModelIDInput
  country: ModelStringInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  deviceToken: ModelStringInput
  email: ModelStringInput
  fullName: ModelStringInput
  idcheckbookID: ModelStringInput
  identificationBackUrl: ModelStringInput
  identificationNumber: ModelStringInput
  identificationType: ModelStringInput
  identificationUrl: ModelStringInput
  isAvailabilityTx: ModelBooleanInput
  isMFA: ModelBooleanInput
  isTerms: ModelBooleanInput
  isUpdateAccount: ModelBooleanInput
  isUsedMoneyBlinkAmount: ModelBooleanInput
  locale: ModelStringInput
  nickname: ModelStringInput
  not: ModelMBUserConditionInput
  oldAvatarUrl: ModelStringInput
  oldIdentificationBackUrl: ModelStringInput
  oldIdentificationUrl: ModelStringInput
  or: [ModelMBUserConditionInput]
  phoneNumber: ModelStringInput
  state: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  zipCode: ModelStringInput
}

input ModelMBUserFilterInput {
  acceptedPromotionalInfo: ModelBooleanInput
  acceptedRequestBlink: ModelBooleanInput
  address: ModelStringInput
  alpha2Code: ModelStringInput
  alpha3Code: ModelStringInput
  and: [ModelMBUserFilterInput]
  avatarUrl: ModelStringInput
  birthDate: ModelStringInput
  checkEmail: ModelBooleanInput
  checkPhone: ModelBooleanInput
  city: ModelStringInput
  cognitoUserId: ModelIDInput
  country: ModelStringInput
  createdAt: ModelStringInput
  currency: ModelStringInput
  deletedAt: ModelStringInput
  deviceToken: ModelStringInput
  email: ModelStringInput
  fullName: ModelStringInput
  id: ModelIDInput
  idcheckbookID: ModelStringInput
  identificationBackUrl: ModelStringInput
  identificationNumber: ModelStringInput
  identificationType: ModelStringInput
  identificationUrl: ModelStringInput
  isAvailabilityTx: ModelBooleanInput
  isMFA: ModelBooleanInput
  isTerms: ModelBooleanInput
  isUpdateAccount: ModelBooleanInput
  isUsedMoneyBlinkAmount: ModelBooleanInput
  locale: ModelStringInput
  nickname: ModelStringInput
  not: ModelMBUserFilterInput
  oldAvatarUrl: ModelStringInput
  oldIdentificationBackUrl: ModelStringInput
  oldIdentificationUrl: ModelStringInput
  or: [ModelMBUserFilterInput]
  phoneNumber: ModelStringInput
  role: ModelStringInput
  state: ModelStringInput
  type: ModelStringInput
  updatedAt: ModelStringInput
  zipCode: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelStringKeyConditionInput {
  beginsWith: String
  between: [String]
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
}

input ModelTxStatusInput {
  eq: TxStatus
  ne: TxStatus
}

input ModelTxTypeInput {
  eq: TxType
  ne: TxType
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableMBBlinkCostByPriceFilterInput {
  blinkCost: TableIntFilterInput
  id: TableIDFilterInput
  range: TableStringFilterInput
}

input TableMBCardFilterInput {
  cardId: TableStringFilterInput
  cardNumber: TableStringFilterInput
  createdAt: TableStringFilterInput
  currencyCode: TableStringFilterInput
  description: TableStringFilterInput
  expirationDate: TableStringFilterInput
  id: TableStringFilterInput
  isActive: TableBooleanFilterInput
  isUsedPayment: TableBooleanFilterInput
  label: TableStringFilterInput
  nameCard: TableStringFilterInput
  payType: TableStringFilterInput
  paymentMethodCountryID: TableStringFilterInput
  transactionType: TableStringFilterInput
  updatedAt: TableStringFilterInput
  userID: TableStringFilterInput
}

input TableMBCheckbookUserFilterInput {
  checkbookData: AWSJSON
  createdAt: TableStringFilterInput
  id: TableIDFilterInput
  updatedAt: TableStringFilterInput
  userID: TableStringFilterInput
}

input TableMBCorresponsalCharguesFilterInput {
  blinkCost: TableStringFilterInput
  id: TableStringFilterInput
  range: TableStringFilterInput
}

input TableMBCorresponsalRequestsFilterInput {
  createdAt: TableStringFilterInput
  id: TableStringFilterInput
  status: TableStringFilterInput
  updatedAt: TableStringFilterInput
  userID: TableStringFilterInput
}

input TableMBCorresponsalSettingsFilterInput {
  createdAt: TableStringFilterInput
  id: TableIDFilterInput
  updatedAt: TableStringFilterInput
  userId: TableStringFilterInput
  value: TableStringFilterInput
}

input TableMBCorresponsalTxFilterInput {
  amount: TableIntFilterInput
  code: TableStringFilterInput
  commission: TableStringFilterInput
  corresponsalID: TableStringFilterInput
  createdAt: TableStringFilterInput
  customerID: TableStringFilterInput
  id: TableIDFilterInput
  transactionType: TableStringFilterInput
  updatedAt: TableStringFilterInput
}

input TableMBSettingsCardFilterInput {
  id: TableStringFilterInput
  isActive: TableBooleanFilterInput
  isUseToPay: TableBooleanFilterInput
  type: TableStringFilterInput
  typeCard: TableStringFilterInput
}

input TableMBUserOqkpjuho2ngvbonruy7shv26zuPreFilterInput {
  createdAt: TableStringFilterInput
  email: TableStringFilterInput
  fullName: TableStringFilterInput
  id: TableStringFilterInput
  identificationNumber: TableStringFilterInput
  nickname: TableStringFilterInput
  phoneNumber: TableStringFilterInput
  type: TableStringFilterInput
}

input TableMBUserPartiesAMLFilterInput {
  createdAt: TableStringFilterInput
  deletedAt: TableStringFilterInput
  id: TableStringFilterInput
  partyID: TableStringFilterInput
  settings: AWSJSON
  status: TableStringFilterInput
  updatedAt: TableStringFilterInput
  userID: TableStringFilterInput
}

input TableModelMBUserVerifiedFilterInput {
  apiResultCode: TableStringFilterInput
  apiResultMessage: TableStringFilterInput
  counterRequested: TableStringFilterInput
  createdAt: TableStringFilterInput
  deletedAt: TableStringFilterInput
  emailSent: TableBooleanFilterInput
  errorCode: TableStringFilterInput
  id: TableIDFilterInput
  status: TableStringFilterInput
  transactionID: TableStringFilterInput
  typeVerification: TableStringFilterInput
  updatedAt: TableStringFilterInput
  userID: TableStringFilterInput
  verified: TableStringFilterInput
  verifiedBy: TableStringFilterInput
  workflowID: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateFileUploadBankInput {
  createdAt: AWSDateTime
  fileName: String
  fileType: String
  id: ID!
  isDownload: Boolean
  location: String
  processedAt: AWSDateTime
  processedBy: String
  type: String
  updatedAt: AWSDateTime
}

input UpdateMBBlinkCostByPriceInput {
  blinkCost: String
  id: ID!
  range: String
}

input UpdateMBBlinkPayInput {
  blinkID: ID
  createdAt: AWSDateTime
  id: ID!
  payID: ID
  type: String
  userID: ID
}

input UpdateMBBlinkSettingsInput {
  blinkCost: Float
  countryID: ID
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  isoStateCode: String
  promotionalCount: Int
  settings: AWSJSON
  type: String
  updatedAt: AWSDateTime
}

input UpdateMBBlinkUserInput {
  blinkAcquired: Int
  blinkAvailable: Int
  blinkPrice: Float
  blinkSettingID: ID
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  isPromotional: Boolean
  updatedAt: AWSDateTime
  userID: ID
}

input UpdateMBCardInput {
  cardId: String
  cardNumber: String
  createdAt: AWSDateTime
  currencyCode: String
  description: String
  expirationDate: String
  id: String!
  isActive: Boolean
  isUsedPayment: Boolean
  label: String
  nameCard: String
  payType: String
  paymentMethod: AWSJSON
  paymentMethodCountryID: String
  transactionType: String
  updatedAt: AWSDateTime
  userID: String
}

input UpdateMBChargeCountryInput {
  chargeCode: String
  countryID: ID
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean
  isBlinkPay: Boolean
  isReceipt: Boolean
  isShipping: Boolean
  settings: AWSJSON
  showOrder: String
  total: Float
  translate: AWSJSON
  updatedAt: AWSDateTime
}

input UpdateMBCheckbookUserInput {
  checkbookData: AWSJSON
  createdAt: String
  id: String!
  updatedAt: String
  userID: String
}

input UpdateMBCodeInput {
  code: String
  codeType: CodeType
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID!
  isUsed: Boolean
  isUserUsed: Boolean
  updatedAt: AWSDateTime
  userID: ID
}

input UpdateMBContactInput {
  code: String
  codeID: ID
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID!
  invitedID: ID
  invitingID: ID
  isFavorite: Boolean
  myReceipts: Int
  myShipments: Int
  updatedAt: AWSDateTime
}

input UpdateMBCorresponsalCharguesInput {
  blinkCost: String
  id: String!
  range: String
}

input UpdateMBCorresponsalRequestsInput {
  createdAt: AWSDateTime
  id: String!
  status: String
  updatedAt: AWSDateTime
  userID: String
}

input UpdateMBCorresponsalTxInput {
  amount: Int
  code: String
  commission: String
  corresponsalID: String
  createdAt: AWSDateTime
  customerID: String
  id: ID!
  transactionType: String
  updatedAt: AWSDateTime
}

input UpdateMBCountryInput {
  alpha2Code: String
  alpha3Code: String
  countryStateId: ID
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean
  isDownload: Boolean
  name: String
  settings: AWSJSON
  showOrder: String
  translate: AWSJSON
  type: String
  updatedAt: AWSDateTime
}

input UpdateMBDownloadBlinkInput {
  amount: Float
  batchCatch: AWSDateTime
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  paymentMethod: String
  paymentMethodId: String
  processAt: AWSDateTime
  stateCode: String
  txID: ID
  type: String
  updatedAt: AWSDateTime
  userID: ID
}

input UpdateMBFinancialDataInput {
  amount: Float
  blinks: Int
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean
  type: String
  updatedAt: AWSDateTime
  userID: ID
}

input UpdateMBMyPaymentMethodInput {
  accountId: String
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  description: String
  id: ID!
  isActive: Boolean
  isUsedPayment: Boolean
  label: String
  payType: String
  paymentMethodCountryID: ID
  settings: AWSJSON
  updatedAt: AWSDateTime
  userID: ID
  value: String
}

input UpdateMBNotificationInput {
  createdAt: AWSDateTime
  data: AWSJSON
  id: ID!
  isRead: Boolean
  message: String
  title: String
  type: String
  updatedAt: AWSDateTime
  userID: ID
}

input UpdateMBPayInput {
  amount: Float
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  exchangeAmount: Float
  exchangeCurrency: String
  exchangeRate: Float
  id: ID!
  paymentID: ID
  paymentMethodCountry: String
  type: String
  updatedAt: AWSDateTime
  userID: ID
}

input UpdateMBPaymentMethodCountryInput {
  alpha2Code: String
  alpha3Code: String
  availableFromAt: AWSDate
  availableUntilAt: AWSDate
  costCenterID: ID
  createdAt: AWSDateTime
  id: ID!
  isActive: Boolean
  isReceipt: Boolean
  isShipping: Boolean
  paymentMethodID: ID
  paymentTypeCode: String
  settings: AWSJSON
  updatedAt: AWSDateTime
}

input UpdateMBPaymentMethodInput {
  code: String
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID!
  name: String
  translate: AWSJSON
  updatedAt: AWSDateTime
}

input UpdateMBSettingsCardInput {
  id: String!
  isActive: Boolean
  isUseToPay: Boolean
  settings: AWSJSON
  type: String
  typeCard: String
}

input UpdateMBSettingsInput {
  alpha2Code: String
  alpha3Code: String
  createdAt: AWSDateTime
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean
  platform: String
  settings: AWSJSON
  updatedAt: AWSDateTime
}

input UpdateMBTaxCountryInput {
  countryID: ID
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  id: ID!
  isActive: Boolean
  isBlinkPay: Boolean
  isReceipt: Boolean
  isShipping: Boolean
  settings: AWSJSON
  showOrder: String
  taxCode: String
  total: Float
  translate: AWSJSON
  updatedAt: AWSDateTime
}

input UpdateMBTransactionInput {
  amount: Float
  amountDeposit: Float
  charges: Float
  codeID: ID
  createdAt: AWSDateTime
  currency: String
  currencyDeposit: String
  deletedAt: AWSDateTime
  id: ID!
  isConfirm: Boolean
  isReceipt: Boolean
  message: String
  receiptID: ID
  requestMessage: String
  shippingID: ID
  taxes: Float
  txStatus: TxStatus
  txType: TxType
  txValues: AWSJSON
  type: String
  updatedAt: AWSDateTime
}

input UpdateMBTransactionPayInput {
  createdAt: AWSDateTime
  id: ID!
  payID: ID
  txID: ID
  type: String
  userID: ID
}

input UpdateMBUserInput {
  acceptedPromotionalInfo: Boolean
  acceptedRequestBlink: Boolean
  address: String
  alpha2Code: String
  alpha3Code: String
  avatarUrl: String
  birthDate: AWSDateTime
  checkEmail: Boolean
  checkPhone: Boolean
  city: String
  cognitoUserId: ID
  country: String
  createdAt: AWSDateTime
  currency: String
  deletedAt: AWSDateTime
  deviceToken: String
  email: AWSEmail
  fullName: String
  id: ID!
  idcheckbookID: ID
  identificationBackUrl: String
  identificationNumber: String
  identificationType: String
  identificationUrl: String
  isAvailabilityTx: Boolean
  isMFA: Boolean
  isTerms: Boolean
  isUpdateAccount: Boolean
  isUsedMoneyBlinkAmount: Boolean
  locale: String
  nickname: String
  oldAvatarUrl: String
  oldIdentificationBackUrl: String
  oldIdentificationUrl: String
  phoneNumber: String
  role: String
  state: String
  type: String
  updatedAt: AWSDateTime
  zipCode: String
}

input UpdateMBUserOqkpjuho2ngvbonruy7shv26zuPreInput {
  createdAt: String
  email: String
  fullName: String
  id: String!
  identificationNumber: String
  nickname: String
  phoneNumber: String
  type: String
}

input UpdateMBUserPartiesAMLInput {
  createdAt: String
  deletedAt: String
  id: String!
  partyID: String
  settings: AWSJSON
  status: String
  updatedAt: String
  userID: String
}

input UpdateModelMBUserVerifiedInput {
  apiResultCode: String
  apiResultMessage: String
  counterRequested: String
  createdAt: String
  deletedAt: AWSDate
  emailSent: Boolean
  errorCode: String
  id: ID!
  status: String
  transactionID: String
  typeVerification: String
  updatedAt: AWSDate
  userID: String
  verified: String
  verifiedBy: String
  workflowID: String
}
